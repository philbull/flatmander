from flipper import *
import pyfits
from scipy.interpolate import splrep,splev


def plot(data, filename,title, range=None):
    if range is not None:
        pylab.matshow(data, vmin=range[0], vmax=range[1])
    else:
        pylab.matshow(data)
    pylab.colorbar()
    pylab.title('%s'%title)
    pylab.gca().set_xticks([])
    pylab.gca().set_yticks([])
    pylab.savefig(filename)
    pylab.clf()
    pylab.close()

def generate_gaussian_window(template, pad_size_degree, fwhm, nSigma):
    """
    Gaussian-smoothed window for use with non-periodic maps.
    """
    window = template.copy()
    pad_size_pix = numpy.int((pad_size_degree * numpy.pi/180.) / window.pixScaleY)
    Ny = window.Ny
    Nx = window.Nx
    
    window.data[:] = 1
    window.data[0:pad_size_pix,:] = 0
    window.data[:,0:pad_size_pix] = 0
    window.data[Ny-pad_size_pix:Ny,:] = 0
    window.data[:,Nx-pad_size_pix:Nx] = 0
    
    window = window.convolveWithGaussian(fwhm=fwhm, nSigma=nSigma)
    return window

def get_inv_noise_cov(weight, rmsArcmin):
    """
    Return masked inverse noise covariance.
    """
        #if numpy.min(weight.data[:]) == 0:
        #raise NotImplementedError("Zero weight not implemented; use 0 in the mask instead")
    
    RAD_TO_MIN = 180./numpy.pi * 60.
    pixArea = RAD_TO_MIN**2. * weight.pixScaleX * weight.pixScaleY
    
    sub_weight=weight.selectSubMap(30,40,-7.3,-1)
    weight.data[:]/=(numpy.mean(sub_weight.data)*rmsArcmin**2. / pixArea)
    noiseCov = 1. / weight.data[:]
    pylab.matshow(noiseCov)
    pylab.show()
    
    #noiseCov /= numpy.mean(noiseCov)
    #noiseCov *= rmsArcmin**2. / pixArea

    return 1. / noiseCov

def fillWithGaussianRandomField(self,ell,Cell,bufferFactor = 1):
        
    ft = fftTools.fftFromLiteMap(self)
        
    Ny = self.Ny*bufferFactor
    Nx = self.Nx*bufferFactor
        
    bufferFactor = int(bufferFactor)
    realPart = numpy.zeros([Ny,Nx])
    imgPart  = numpy.zeros([Ny,Nx])
        
    ly = numpy.fft.fftfreq(Ny,d = self.pixScaleY)*(2*numpy.pi)
    lx = numpy.fft.fftfreq(Nx,d = self.pixScaleX)*(2*numpy.pi)

    modLMap = numpy.zeros([Ny,Nx])
    iy, ix = numpy.mgrid[0:Ny,0:Nx]
    modLMap[iy,ix] = numpy.sqrt(ly[iy]**2+lx[ix]**2)
        
    s = splrep(ell,Cell,k=3)
        
    ll = numpy.ravel(modLMap)
    kk = splev(ll,s)
    id = numpy.where(ll>ell.max())
    kk[id] = Cell[-1]

    area = Nx*Ny*self.pixScaleX*self.pixScaleY
    p = numpy.reshape(kk,[Ny,Nx]) /area * (Nx*Ny)**2

    realPart = numpy.sqrt(p)*numpy.random.randn(Ny,Nx)
    imgPart = numpy.sqrt(p)*numpy.random.randn(Ny,Nx)
        
    kMap = realPart+1j*imgPart
        
    data = numpy.real(numpy.fft.ifft2(kMap))
        
    b = bufferFactor
    self.data = data[(b-1)/2*self.Ny:(b+1)/2*self.Ny,(b-1)/2*self.Nx:(b+1)/2*self.Nx]
    
    return(self)


def makeEmptyCEATemplate(raSizeDeg, decSizeDeg,meanRa = 180., meanDec = 0., pixScaleXarcmin = 0.5, pixScaleYarcmin=0.5):
    
    
    cdelt1 = -pixScaleXarcmin/60.
    cdelt2 = pixScaleYarcmin/60.
    naxis1 = numpy.int(raSizeDeg/pixScaleXarcmin*60.+0.5)
    naxis2 = numpy.int(decSizeDeg/pixScaleYarcmin*60.+0.5)
    refPix1 = naxis1/2.
    refPix2 = naxis2/2.
    pv2_1 = 1.0
    cardList = pyfits.CardList()
    cardList.append(pyfits.Card('NAXIS', 2))
    cardList.append(pyfits.Card('NAXIS1', naxis1))
    cardList.append(pyfits.Card('NAXIS2', naxis2))
    cardList.append(pyfits.Card('CTYPE1', 'RA---CEA'))
    cardList.append(pyfits.Card('CTYPE2', 'DEC--CEA'))
    cardList.append(pyfits.Card('CRVAL1', meanRa))
    cardList.append(pyfits.Card('CRVAL2', meanDec))
    cardList.append(pyfits.Card('CRPIX1', refPix1+1))
    cardList.append(pyfits.Card('CRPIX2', refPix2+1))
    cardList.append(pyfits.Card('CDELT1', cdelt1))
    cardList.append(pyfits.Card('CDELT2', cdelt2))
    cardList.append(pyfits.Card('CUNIT1', 'DEG'))
    cardList.append(pyfits.Card('CUNIT2', 'DEG'))
    hh = pyfits.Header(cards=cardList)
    wcs = astLib.astWCS.WCS(hh, mode='pyfits')
    data = numpy.zeros([naxis2,naxis1])
    ltMap = liteMap.liteMapFromDataAndWCS(data,wcs)
    
    return ltMap


def writeBinnedSpectrum(lbin,clbin,fileName):
    
    g = open(fileName,mode="w")
    
    for k in xrange(len(lbin)):
        g.write("%f %e \n"%(lbin[k],clbin[k]))
    
    g.close()


def addWhiteNoise(map,rmsArcmin):
    """
    Adds white noise to a given map; returns a new map
    """
    noisyMap = map.copy()
    if rmsArcmin == 0.0:
        pass
    else:
        radToMin = 180/numpy.pi*60
        pixArea = radToMin**2 * map.pixScaleX*map.pixScaleY
        rms = rmsArcmin/numpy.sqrt(pixArea)
        
        noise = numpy.random.normal( scale = rms, size = map.data.shape )
        
        noisyMap.data[:] += noise[:]
    
    return noisyMap


def makeTemplate(m, wl, ell, maxEll, outputFile=None, print_info=False):
    """
    For a given map (m) return a 2D k-space template from a 1D specification wl
    ell = 2pi * i / deltaX
    (m is not overwritten)
    """
    
    ell = numpy.array(ell)
    wl  = numpy.array(wl)
    
    fT = fftTools.fftFromLiteMap(m)
    if print_info:
        print "max_lx, max_ly", fT.lx.max(), fT.ly.max()
        print "m_dx, m_dy", m.pixScaleX, m.pixScaleY
        print "m_nx, m_ny", m.Nx, m.Ny
    l_f = numpy.floor(fT.modLMap)
    l_c = numpy.ceil(fT.modLMap)
    fT.kMap[:,:] = 0.
    
    for i in xrange(numpy.shape(fT.kMap)[0]):
        for j in xrange(numpy.shape(fT.kMap)[1]):
            if l_f[i,j] > maxEll or l_c[i,j] > maxEll:
                continue
            w_lo = wl[l_f[i,j]]
            w_hi = wl[l_c[i,j]]
            trueL = fT.modLMap[i,j]
            w = (w_hi-w_lo)*(trueL - l_f[i,j]) + w_lo
            fT.kMap[i,j] = w
    
    m = m.copy()
    m.data = abs(fT.kMap)
    if outputFile != None:
        m.writeFits(outputFile, overWrite = True)
    return m


def applyBeam(map, beamTemp):
    """
    Apply a given beam template to a map.
    """
    if isinstance(map, numpy.ndarray):
        # Numpy array
        f_T = beamTemp * numpy.fft.fft2(map)
        map = numpy.real(numpy.fft.ifft2(f_T))
    else:
        # LiteMap
        f_T = beamTemp * numpy.fft.fft2(map.data)
        map.data[:]=numpy.real(numpy.fft.ifft2(f_T))
    return map


def make2dPowerSpectrum(map,l,cl):
    
    ly = numpy.fft.fftfreq(map.Ny,d = map.pixScaleY)*(2*numpy.pi)
    lx = numpy.fft.fftfreq(map.Nx,d = map.pixScaleX)*(2*numpy.pi)
    modLMap = numpy.zeros([map.Ny,map.Nx])
    iy, ix = numpy.mgrid[0:map.Ny,0:map.Nx]
    modLMap[iy,ix] = numpy.sqrt(ly[iy]**2+lx[ix]**2)
    s = splrep(l,cl,k=3)
    ll = numpy.ravel(modLMap)
    kk = splev(ll,s)
    id = numpy.where(ll>l.max())
    kk[id]=cl[-1]
    area = map.Nx*map.Ny*map.pixScaleX*map.pixScaleY
    power_2d = numpy.reshape(kk,[map.Ny,map.Nx])/(map.pixScaleX*map.pixScaleY)
    return(power_2d)


def makeMask(liteMap, nHoles, holeSize, lenApodMask,out_pix):
    
    pixScaleArcmin=liteMap.pixScaleX*60*180/numpy.pi
    holeSizePix=numpy.int(holeSize/pixScaleArcmin)
    
    mask=liteMap.copy()
    mask.data[:]=1
    holeMask=mask.copy()
    
    Nx=mask.Nx
    Ny=mask.Ny
    xList=numpy.random.rand(nHoles)*Nx
    yList=numpy.random.rand(nHoles)*Ny
    
    #xList=[Nx/2.]
    #yList=[Ny/2.]
    
    for k in range(nHoles):
        holeMask.data[:]=1
        for i in range(Nx):
            for j in range(Ny):
            	rad=(i-numpy.int(xList[k]))**2+(j-numpy.int(yList[k]))**2
            	
            	if rad < holeSizePix**2:
                    holeMask.data[j,i]=0
                for pix in range(lenApodMask):
                	
                    if rad <= (holeSizePix+pix)**2 and rad > (holeSizePix+pix-1)**2:
                        holeMask.data[j,i]=1./2*(1-numpy.cos(-numpy.pi*float(pix)/lenApodMask))
        mask.data[:]*=holeMask.data[:]

    mask.data[0:out_pix,:]=0
    mask.data[mask.Ny-out_pix:mask.Ny,:]=0
    mask.data[:,0:out_pix]=0
    mask.data[:,mask.Nx-out_pix:mask.Nx]=0


    return mask


def litemap_from_fits(fname, template=None):
    """
    Load image data from a FITS file into a new LiteMap based on a given 
    LiteMap template. The image data will normally have been saved using the 
    writeFits() method of LiteMap.
    """
    # Load data from FITS file
    hdulist = pyfits.open(fname)
    hdr = hdulist[0].header
    
    # ; or, use an input template
    if template is None:
        # Get LiteMap properties from FITS file header
        
        # N.B. raSizeDeg and decSizeDeg do not *exactly* match their values for 
        # the original LiteMap, since a float -> integer conversion was 
        # performed when the LiteMap was first saved.
        meanRa = hdr['CRVAL1']
        meanDec = hdr['CRVAL2']
        pixScaleXarcmin = -1.*60.*hdr['CDELT1']
        pixScaleYarcmin = 60.*hdr['CDELT2']
        raSizeDeg = (hdr['NAXIS1'] - 0.5) * pixScaleXarcmin / 60.
        decSizeDeg = (hdr['NAXIS2'] - 0.5) * pixScaleYarcmin / 60.
        
        # Create template using these properties
        t = makeEmptyCEATemplate( raSizeDeg, decSizeDeg, meanRa, meanDec, 
                                  pixScaleXarcmin, pixScaleYarcmin )
        
    else:
        # Copy input template
        t = template.copy()
    
    # Load data into LiteMap and return
    t.data[:] = hdulist[0].data
    return t

